<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[比海更深]]></title>
      <url>%2F2016%2F12%2F17%2F%E6%AF%94%E6%B5%B7%E6%9B%B4%E6%B7%B1%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL Transaction]]></title>
      <url>%2F2016%2F12%2F16%2FMySQL%20Transaction%2F</url>
      <content type="text"><![CDATA[原文链接：http://www.w3resource.com/mysql/mysql-transaction.php 简述 一个事务是一个包含一条或多条 SQL 语句的作业的逻辑单位。 事务是可以提交或回滚的作业的原子单位。 当一个事务对数据库进行多个更改时，有两种结果，若事务提交则所有更改成功，若事务回滚则所有更改撤销。 事务开始于第一条可执行的 SQL 语句。 当提交或回滚事务时，使用 COMMIT 或 ROLLBACK 语句显式地或在发出 DDL 语句时隐式地提交事务，事务结束。 DDL(Data Definition Language)：用于管理表和索引结构，CREATE、ALTER、RENAME、DROP 和 TRUNCATE 语句仅列出一些数据定义元素。 事务的概念 为了便于理解，用一个银行数据库的例子来说明。假设存款人将资金从他的储蓄卡(SB a/c)转移到信用卡(CA a/c)，该语句将被分为四个部分： 储蓄卡操作 信用卡操作 记录到事务日志 结束事务 操作储蓄卡的 SQL 语句如下： 123UPDATE sb_accountsSET balance = balance - 1000WHERE account_no = 932656 ; 操作信用卡的 SQL 语句如下： 123UPDATE ca_accountsSET balance = balance + 1000WHERE account_no = 933456 ; 记录到事务日志的 SQL 语句如下： 12INSERT INTO journal VALUES (100896, &apos;Tansaction on Benjamin Hampshair a/c&apos;, &apos;26-AUG-08&apos; 932656, 933456, 1000); 结束事务的 SQL 语句如下： 1COMMIT WORK; MySQL 和 ACID 模型 ACID (Atomicity, Consistency, Isolation, Durability) 是保证数据库事务可靠处理的一组属性。 在 MySQL 中，InnoDB 存储引擎支持 ACID 兼容的特性。 以下各节讨论 MySQL 的特性，特别是 InnoDB 存储引擎与 ACID 模型类别的交互： Atomicity：主要涉及InnoDB事务，相关的 MySQL 功能包括： ⋅⋅1. 自动提交设置(Autocommit setting)； ⋅⋅2. COMMIT 语句； ⋅⋅3. ROLLBACK 语句； ⋅⋅4. 从 INFORMATION_SCHEMA 表操作数据。 Consistency：主要涉及内部 InnoDB 处理以保护数据免遭崩溃，相关的 MySQL 功能包括： ⋅⋅1. InnoDB 双重写缓冲区(InnoDB doublewrite buffer)； ⋅⋅. *doublewrite buffer 是一个位于系统表空间中的存储区域，InnoDB 在将页面写入其在数据文件中的正确位置之前写入从 InnoDB 缓冲池刷新的页面（原文：The doublewrite buffer is a storage area located in the system tablespace where InnoDB writes pages that are flushed from the InnoDB buffer pool, before the pages are written to their proper positions in the data file.）。 ⋅⋅2. InnoDB 崩溃恢复。 Isolation：主要涉及 InnoDB 事务，主要是适用于每个事务的隔离级别，相关的 MySQL 功能包括： ⋅⋅1. 自动提交设置(Autocommit setting)； ⋅⋅2. SET ISOLATION LEVEL 语句； ⋅⋅3. InnoDB 锁的底层细节。在性能调优期间，可以通过 INFORMATION_SCHEMA 表查看详细信息。 Durability：涉及 MySQL 中与特定硬件配置交互的软件功能，相关的 MySQL 功能包括： ⋅⋅1. InnoDB 双重写缓冲区通过 innodb_doublewrite 配置选项的开启与关闭； ⋅⋅2. 配置选项 innodb_flush_log_at_trx_commit； ⋅⋅3. 配置选项 sync_binlog； ⋅⋅4. 配置选项 innodb_file_per_table； ⋅⋅5. 在存储设备（如磁盘驱动器，SSD 或 RAID 阵列）中写入缓冲区； ⋅⋅6. 存储设备中电池支持的缓存（Battery-backed cache in a storage device）； ⋅⋅7. 用于运行 MySQL 的操作系统，特别是其对 fsync() 系统调用的支持； ⋅⋅8. UPS 保护所有运行 MySQL 服务和存储 MySQL 数据的服务器和存储设备的电源； ⋅⋅9. 备份策略，如备份频率、类型以及备份的保留期； ⋅⋅10. 对于分布式或托管的数据应用程序，数据中心的特殊特性：MySQL 服务器的硬件位于何处、数据中心之间的网络连接。 MySQL 事务 MySQL(5.6版本) 通过诸如 SET autocommit、START TRANSACTION、COMMIT 和 ROLLBACK 这样的语句支持本地事务（在一个给定的客户端会话中）。以下是START TRANSACTION、COMMIT 和 ROLLBACK 的语法： 123456789101112 START TRANSACTION transaction_characteristic [, transaction_characteristic] ...] transaction_characteristic: WITH CONSISTENT SNAPSHOT | READ WRITE | READ ONLY BEGIN [WORK] COMMIT [WORK] [AND [NO] CHAIN] [[NO] RELEASE] ROLLBACK [WORK] [AND [NO] CHAIN] [[NO] RELEASE] SET autocommit = &#123;0 | 1&#125; 以下这些语句提供对事务使用的控制： START TRANSACTION 或 BEGIN 语句开始一个新事务； COMMIT 提交当前事务，使其更改永久生效； ROLLBACK 回滚当前事务，取消其更改； SETautocommit 语句为当前会话禁止或启用默认的 autocommit 模式。 默认情况，MySQL 运行时 autocommit 模式是激活的。这意味着只要执行一条语句就会更新一个表，MySQL 在磁盘上存储该更新使其永久生效。该更改不能回滚。 现在，MySQL 在 autocommit 模式激活的情况下运行： 123456789mysql&gt; select * from student_mast;+------------+------------------+----------+| STUDENT_ID | NAME | ST_CLASS |+------------+------------------+----------+| 2 | Neena Kochhar | 9 || 3 | Lex De Haan | 9 || 4 | Alexander Hunold | 11 |+------------+------------------+----------+3 rows in set (0.09 sec) 执行一条更新命令： 12345678910111213 mysql&gt; UPDATE STUDENT_MAST SET ST_CLASS=8 WHERE STUDENT_ID=2; Query OK, 1 row affected (0.08 sec) Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from student_mast;+------------+------------------+----------+| STUDENT_ID | NAME | ST_CLASS |+------------+------------------+----------+| 2 | Neena Kochhar | 8 || 3 | Lex De Haan | 9 || 4 | Alexander Hunold | 11 |+------------+------------------+----------+3 rows in set (0.00 sec) 现在执行 ROLLBACK 命令来返回前一阶段： 123456789101112 mysql&gt; ROLLBACK; Query OK, 0 rows affected (0.03 sec)mysql&gt; select * from student_mast;+------------+------------------+----------+| STUDENT_ID | NAME | ST_CLASS |+------------+------------------+----------+| 2 | Neena Kochhar | 8 || 3 | Lex De Haan | 9 || 4 | Alexander Hunold | 11 |+------------+------------------+----------+3 rows in set (0.00 sec) 在 autocommit 模式激活的情况下回滚没有生效。 禁用 autocommit 模式，使用 START TRANSACTION 语句： 1234567891011121314151617181920212223242526272829 mysql&gt; START TRANSACTION; Query OK, 0 rows affected (0.00 sec)mysql&gt; UPDATE STUDENT_MAST SET ST_CLASS=10 WHERE STUDENT_ID=2;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from student_mast;+------------+------------------+----------+| STUDENT_ID | NAME | ST_CLASS |+------------+------------------+----------+| 2 | Neena Kochhar | 10 || 3 | Lex De Haan | 9 || 4 | Alexander Hunold | 11 |+------------+------------------+----------+3 rows in set (0.00 sec)mysql&gt; ROLLBACK;Query OK, 0 rows affected (0.07 sec)mysql&gt; select * from student_mast;+------------+------------------+----------+| STUDENT_ID | NAME | ST_CLASS |+------------+------------------+----------+| 2 | Neena Kochhar | 8 || 3 | Lex De Haan | 9 || 4 | Alexander Hunold | 11 |+------------+------------------+----------+3 rows in set (0.00 sec) MySQL 语句不能回滚并且语句引起一个隐式提交 在 MySQL 中，一些语句不能回滚。例如 CREATE 或 DROP 数据库，CREATE、ALTER 或 DROP 表，或存储程序这样的 DDL 语句。应该在不使用这些语句的情况下设计一个事务。 以下列出的语句（以及它们的同义词）隐式的结束当前会话中活动的任何事务，就像在执行这些语句之前已经执行 COMMIT 一样： 定义或修改数据库对象的 DDL 语句：ALTER DATABASE, UPGRADE DATA DIRECTORY NAME, ALTER EVENT, ALTER PROCEDURE, ALTER SERVER, ALTER TABLE, ALTER VIEW, CREATE DATABAS, CREATE EVENT, CREATE INDEX, CREATE PROCEDURE, CREATE SERVER, CREATE TABLE, CREATE TRIGGER, CREATE VIEW, DROP DATABASE, DROP EVENT, DROP INDEX, DROP PROCEDURE, DROP SERVER, DROP TABLE, DROP TRIGGER, DROP VIEW, RENAME TABLE, TRUNCATE TABLE。 当与 stored function 一起使用时，ALTER FUNCTION, CREATE FUNCTION 和 DROP FUNCTION 也引起隐式提交，但与 UDFs（User-Defined Function） 一起使用时不是这样（ALTER FUNCTION 只能和 stored function 一起使用）。 ⋅⋅⋅1. stored functions 是一种特殊类型的 stored program，它返回单个值。使用 stored functions 来封装可在 SQL 语句或 stored programs 中重复使用的常见公式或业务规则（原文：A stored function is a special kind stored program that returns a single value. You use stored functions to encapsulate common formulas or business rules that are reusable among SQL statements or stored programs.）。 如果使用了 TEMPORARY 关键字，ALTER TABLE, CREATE TABLE 和 DROP TABLE 不提交事务。 隐式的使用或修改 MySQL 数据库中表的语句：CREATE USER, DROP USER, GRANT, RENAME USER, REVOKE, SET PASSWORD。 事务的控制和锁语句：BEGIN, LOCK TABLES, SET autocommit = 1 (如果值不是已经设为 1), START TRANSACTION, UNLOCK TABLES。 数据加载语句： LOAD DATA INFILE。LOAD DATA INFILE 仅在表使用 NDB 存储引擎时引起一个隐式的提交。 管理语句：ANALYZE TABLE, CACHE INDEX, CHECK TABLE, LOAD INDEX INTO CACHE, OPTIMIZE TABLE, REPAIR TABLE。 重复控制语句：START SLAVE, STOP SLAVE, RESET SLAVE, CHANGE MASTER TO。 SAVEPOINT, ROLLBACK TO SAVEPOINT 和 RELEASE SAVEPOINT InnoDB 支持 SQL 语句 SAVEPOINT, ROLLBACK TO SAVEPOINT, RELEASE SAVEPOINT，还有用于 ROLLBACK 的可选关键字 WORK。 SAVEPOINT 语句用标识符名称设置已经命名的事务 savepoint。如果当前事务有一个与其同名的 savepoint，则旧的 savepoint 将被删除，并设置一个新的。 ROLLBACK TO SAVEPOINT 语句将事务回滚到指定的 savepoint 而不终止事务。当前事务对 savepoint 后的行所做的修改在回滚中撤销，但 InnoDB 不释放在 savepoint 后存储在内存中的行锁（？？？）（对于新插入的行，锁的信息由存储在该行中的事务 ID 携带，该锁不单独存储在内存中。）。语法如下： 123SAVEPOINT identifier ROLLBACK [WORK] TO [SAVEPOINT] identifier RELEASE SAVEPOINT identifier 如果执行 COMMIT，或在没有指定一个 savepoint 时执行 ROLLBACK，则会删除当前事务的所有 savepoint。 锁定和解锁表 为了与其它会话协同运行来访问表或防止其它会话在会话需要独占访问它们的期间修改表，MySQL 激活客户端会话来显式的获取表锁。一个会话可以仅为自身获取或释放锁。一个会话不能为另一个会话获取锁或释放另一个会话持有的锁。（A session can acquire or release locks only for itself. One session cannot acquire locks for another session or release locks held by another session.） LOCK TABLES 为当前客户端会话显式的获取表锁。可以为基本表（base tables）或视图获取表锁。必须有 LOCK TABLES 权限，以及要锁定的每个对象的 SELECT 权限（原文：You must have the LOCK TABLES privilege, and the SELECT privilege for each object to be locked.）。 UNLOCK TABLES 显式的释放当前会话持有的任何表锁。LOCK TABLES 在获取新锁之前隐式的释放当前会话持有的任何表锁（LOCK TABLES implicitly releases any table locks held by the current session before acquiring new locks.）。语法如下：123456789 LOCK TABLES tbl_name [[AS] alias] lock_type [, tbl_name [[AS] alias] lock_type] ... lock_type: READ [LOCAL] | [LOW_PRIORITY] WRITE UNLOCK TABLES SET TRANSACTION 语法12345678910111213SET [GLOBAL | SESSION] TRANSACTION transaction_characteristic [, transaction_characteristic] ...transaction_characteristic: ISOLATION LEVEL level | READ WRITE | READ ONLY level: REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED | SERIALIZABLE 使用 GLOBAL 关键字，该语句将全局应用于后续会话。现有会话不受影响。 使用 SESSION 关键字，该语句将应用于在当前会话执行的所有后续事务。 不使用任何 SESSION 或 GLOBAL 关键字，该语句应用于当前会话执行的下一个（未启动）事务。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Pointers and Allocation]]></title>
      <url>%2F2016%2F12%2F03%2FPointers%20and%20Allocation%2F</url>
      <content type="text"><![CDATA[原文链接：https://golang.org/doc/faq#Pointers 何时函数的参数通过值传递？ 和 C 语言家族中的所有语言一样，Go 中的所有东西都通过值传递。也就是说，一个函数总是得到被传递的东西的 copy，就像一条赋值语句将该值赋给参数。例如，给函数传递一个 int 值，即创建了一个该 int 值的 copy；传递一个指针值就创建了一个该指针的 copy，而不是它指向的数据的 copy。 map 和 slice 表现的像指针：它们是包含指向底层 map 或 slice 数据的指针的描述符。复制一个 map 或 slice 值并不复制它指向的数据。复制一个 interface 值将创建一个存储在该 interface 值中的东西的 copy。如果 interface 值持有指针，复制该 interface 值将创建一个该指针的 copy，而不是它指向的数据的 copy。 何时应该使用 interface 的指针？ 几乎从不。interface 值的指针非常罕见，棘手的情况包括为延迟的评价伪装一个 interface 值的类型。（原文：Pointers to interface values arise only in rare, tricky situations involving disguising an interface value’s type for delayed evaluation.） 给期望接收一个 interface 的函数传递一个 interface 值的指针是常见的错误。编译器会抱怨这个错误但情况仍然可能令人困惑，因为有时候一个指针是必要的，以满足一个 interface。 虽然一个指向一个具体类型的指针可以满足一个 interface，但有一个例外，一个 interface 的指针永远不能满足一个 interface。 考虑下面的变量声明： 1var w io.Writer 打印函数 fmt.Fprintf 取满足 io.Writer 的值（实现规范 Write 方法的东西）作为其第一个参数。因此我们可以这样写： fmt.Fprintf(w, &quot;hello, world\n&quot;) 若传递 w 的地址，程序将不能编译。 fmt.Fprintf(&amp;w, &quot;hello, world\n&quot;) // Compile-time error. 有一个例外是，任何值，即使是 interface 的指针，可以分配给一个空的 interface 类型变量（interface{}）。即使这样，如果值是一个 interface 的指针，几乎肯定是一个错误；结果可能会混淆。 应该在值还是指针上定义方法？12func (s *MyStruct) pointerMethod() &#123; &#125; // method on pointerfunc (s MyStruct) valueMethod() &#123; &#125; // method on value ​ 对于不习惯指针的程序员，以上两个例子之间的区别可能是难以理解的，但情况其实很简单。定义类型的方法时，确切地说，receiver（上例中的 s）就像方法的一个参数。无论将 receiver 定义为值还是指针，都是同一个问题，即函数的参数应该是值还是指针。这里有几点考虑。 最重要的，方法是否需要修改 receiver？如果需要，receiver 必须是一个指针（Slices 和 maps 像引用一样执行，它们的情况有些微秒，但要在方法中修改 slice 的长度时，receiver 仍然必须是一个指针）。在以上例子中，如果 pointerMethod 更改 s 的字段，调用者会看到这些变化，但 valueMethod 是调用调用者的参数的一个 copy（这就是传值的定义），所以它所做的改变调用者是看不见的。 第二点是关于效率的考虑，如果 receiver 非常大，比如说是一个大 struct，使用一个指针 receiver 的成本会更低。 接下来是一致性。如果类型的某些方法必须有指针 receiver，其余的方法也应该有，因此无论如何使用类型，方法集都是一致的。 对于类型，比如基础类型 slice 和 小 struct 来说，一个值 receiver 是成本很低的，所以除非方法在语义上需要一个指针，否则值 receiver 更加有效和清晰。 new 和 make 有何不同？简单来讲，new 分配内存，make 初始化 slice、map 和 channel 类型。 在 64 位机器上 int 的大小是多少？ int 和 uint 的大小是具体平台具体实现的，但在给定平台上彼此相同。 为了可移植性，依赖于某个特定大小的值的代码应该使用显式大小的类型，比如 int64。 在 Go 1.1 之前的版本中，64 位的 Go 编译器使用 32 位表示形式的 int。Go 1.1 版本使用 64 位表示。 另一方面，浮点标量和复数总是依尺寸分：float32、complex64 等等，因为程序员在使用浮点数时要注意精度。浮点常数的默认大小是 float64。 如何判断一个变量是被分配到堆还是堆栈？ 从正确的角度来看，你不需要知道。只要有对它的引用，Go 中的每个变量就存在。实现选择的存储位置与语言的语义无关。 存储位置确实对编写有效率的程序有影响。如果可能，Go 编译器将在函数的堆栈框架中为函数分配其局部变量。然而，如果编译器无法证明函数返回后变量没有被引用，那么编译器必须在垃圾回收堆上分配变量，以避免悬挂指针错误。（However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. ） 此外，如果一个本地变量非常大，将它存储在堆而不是堆栈中或许更有意义。 在当前编译器中，如果一个变量取得了它的地址，那么该变量就是堆上分配的候选。然而，基本的转义分析识别某些情况下，这样的变量在函数返回之后将不会存活，并且可以驻留在堆栈上。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F07%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
